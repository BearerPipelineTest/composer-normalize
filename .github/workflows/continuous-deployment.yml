# https://help.github.com/en/categories/automating-your-workflow-with-github-actions

name: "Continuous Deployment"

on:
  push:
    tags:
      - "**"

env:
  REQUIRED_PHP_EXTENSIONS: "mbstring"

jobs:
  release:
    name: "Release"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "7.4"

        dependencies:
          - "locked"

    env:
      COMPOSER_NORMALIZE_PHAR: ".build/phar/composer-normalize.phar"
      COMPOSER_NORMALIZE_PHAR_SIGNATURE: ".build/phar/composer-normalize.phar.asc"
      GPG_KEYS: ".build/phar/keys.asc"
      GPG_KEYS_ENCRYPTED: "phar/keys.asc.gpg"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.0.0"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@1.6.2"
        with:
          coverage: "none"
          extensions: "${{ env.REQUIRED_PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v1.0.3"
        with:
          path: "~/.composer/cache"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('**/composer.lock') }}-phar"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-phar"

      - name: "Install locked dependencies with composer"
        run: "composer install --no-interaction --no-progress --no-suggest"

      - name: "Require composer/composer"
        run: "composer require composer/composer:1.9.1 --no-interaction --no-progress --no-suggest"

      - name: "Validate configuration for humbug/box"
        run: "phar/box.phar validate box.json"

      - name: "Compile composer-normalize.phar with humbug/box"
        run: "phar/box.phar compile --config=box.json"

      - name: "Show info about composer-normalize.phar with humbug/box"
        run: "phar/box.phar info ${{ env.COMPOSER_NORMALIZE_PHAR }}"

      - name: "Run composer-normalize.phar"
        run: "${{ env.COMPOSER_NORMALIZE_PHAR }}"

      - name: "Show gpg version"
        run: "gpg --version"

      - name: "Decrypt keys.asc.gpg with gpg"
        run: "gpg --batch --output ${{ env.GPG_KEYS }} --passphrase \"${{ secrets.GPG_DECRYPT_PASSPHRASE }}\" --yes --decrypt ${{ env.GPG_KEYS_ENCRYPTED }}"

      - name: "Import keys from keys.asc with gpg"
        run: "gpg --batch --import ${{ env.GPG_KEYS }}"

      - name: "Sign composer-normalize.phar with gpg"
        run: "gpg --armor --local-user \"${{ secrets.GPG_LOCAL_USER }}\" --output ${{ env.COMPOSER_NORMALIZE_PHAR_SIGNATURE }} --passphrase \"${{ secrets.GPG_KEY_PASSPHRASE }}\" --pinentry-mode loopback --yes --detach-sig ${{ env.COMPOSER_NORMALIZE_PHAR }}"

      - name: "Receive key with gpg"
        run: "gpg --receive-key \"${{ secrets.GPG_LOCAL_USER }}\""

      - name: "Verify signature of composer-normalize.phar with gpg"
        run: "gpg --verify ${{ env.COMPOSER_NORMALIZE_PHAR_SIGNATURE }} ${{ env.COMPOSER_NORMALIZE_PHAR }}"

      - name: "Remove decrypted keys.asc"
        run: "rm ${{ env.GPG_KEYS }}"

      - name: "Determine tag"
        id: "determine-tag"
        run: "echo \"::set-output name=tag::${GITHUB_REF#refs/tags/}\""

      - name: "Create release"
        id: "create-release"
        uses: "actions/create-release@v1.0.0"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          draft: false
          prerelease: false
          release_name: "${{ steps.determine-tag.outputs.tag }}"
          tag_name: "${{ steps.determine-tag.outputs.tag }}"

      - name: "Upload composer-normalize.phar"
        uses: "actions/upload-release-asset@v1.0.1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          asset_content_type: "text/plain"
          asset_name: "composer-normalize.phar"
          asset_path: "${{ env.COMPOSER_NORMALIZE_PHAR }}"
          upload_url: "${{ steps.create-release.outputs.upload_url }}"

      - name: "Upload composer-normalize.phar.asc"
        uses: "actions/upload-release-asset@v1.0.1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          asset_content_type: "text/plain"
          asset_name: "composer-normalize.phar.asc"
          asset_path: "${{ env.COMPOSER_NORMALIZE_PHAR_SIGNATURE }}"
          upload_url: "${{ steps.create-release.outputs.upload_url }}"
